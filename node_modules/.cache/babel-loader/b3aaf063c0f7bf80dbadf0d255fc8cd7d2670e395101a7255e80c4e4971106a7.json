{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore';\n\n// API 기본 URL 설정\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000';\n\n// axios 인터셉터 설정\naxios.interceptors.request.use(config => {\n  // 로컬 스토리지에서 사용자 정보 가져오기\n  const adminUser = localStorage.getItem('adminUser');\n  const tempUser = localStorage.getItem('tempUser');\n  const user = adminUser ? JSON.parse(adminUser) : tempUser ? JSON.parse(tempUser) : null;\n\n  // 사용자가 로그인한 경우 헤더에 인증 정보 추가\n  if (user) {\n    // 실제 토큰이 없으므로 임시 인증 헤더 추가\n    config.headers['Authorization'] = `Bearer dummy-token-for-${user.email}`;\n  } else {\n    // 사용자 정보가 없는 경우에도 임시 인증 헤더 추가 (401 에러 방지)\n    config.headers['Authorization'] = `Bearer dummy-token-for-anonymous`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 설정\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 401 에러 처리 (인증 실패)\n  if (error.response && error.response.status === 401) {\n    console.error('인증 오류가 발생했습니다:', error.response.data);\n\n    // 로그인 페이지로 이동하는 대신 콘솔에 오류 메시지만 출력\n    // 로컬 스토리지와 사용자 정보는 유지\n    // 로그인 페이지로 리다이렉트하지 않음\n  }\n  return Promise.reject(error);\n});\nconst store = createStore({\n  state: {\n    user: null,\n    scenarios: [],\n    currentScenario: null,\n    loading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.is_admin,\n    scenarios: state => state.scenarios,\n    currentScenario: state => state.currentScenario,\n    isLoading: state => state.loading,\n    error: state => state.error\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    SET_SCENARIOS(state, scenarios) {\n      state.scenarios = scenarios;\n    },\n    SET_CURRENT_SCENARIO(state, scenario) {\n      state.currentScenario = scenario;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    // 인증 상태 확인\n    checkAuth({\n      commit\n    }) {\n      // 로컬 스토리지에서 관리자 로그인 상태 확인\n      const adminUser = localStorage.getItem('adminUser');\n      if (adminUser) {\n        commit('SET_USER', JSON.parse(adminUser));\n        return;\n      }\n\n      // 로컬 스토리지에서 임시 사용자 로그인 상태 확인\n      const tempUser = localStorage.getItem('tempUser');\n      if (tempUser) {\n        commit('SET_USER', JSON.parse(tempUser));\n        return;\n      }\n\n      /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n      const auth = getAuth()\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          try {\r\n            // Firebase 인증 후 사용자 정보 설정\r\n            const db = getFirestore()\r\n            const userRef = collection(db, 'users')\r\n            const q = query(userRef, where('email', '==', user.email))\r\n            const querySnapshot = await getDocs(q)\r\n            \r\n            if (!querySnapshot.empty) {\r\n              // 기존 사용자 정보 가져오기\r\n              const userData = querySnapshot.docs[0].data()\r\n              commit('SET_USER', {\r\n                id: querySnapshot.docs[0].id,\r\n                username: userData.username || user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: userData.is_admin || false\r\n              })\r\n            } else {\r\n              // 새 사용자 정보 생성\r\n              const newUser = {\r\n                username: user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: user.email === 'admin@example.com', // 관리자 계정 설정\r\n                created_at: new Date().toISOString()\r\n              }\r\n              \r\n              const docRef = await addDoc(userRef, newUser)\r\n              commit('SET_USER', {\r\n                id: docRef.id,\r\n                ...newUser\r\n              })\r\n            }\r\n          } catch (error) {\r\n            console.error('사용자 정보 가져오기 실패:', error)\r\n            commit('SET_USER', null)\r\n          }\r\n        } else {\r\n          commit('SET_USER', null)\r\n        }\r\n      })\r\n      */\n    },\n    // 로그인\n    async login({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // 관리자 계정 특별 처리 (admin@example.com / password123!)\n        if (email === 'admin@example.com' && password === 'password123!') {\n          const adminUser = {\n            id: 'admin-user-id',\n            username: 'Admin',\n            email: 'admin@example.com',\n            is_admin: true\n          };\n          commit('SET_USER', adminUser);\n          // 관리자 계정 정보를 로컬 스토리지에 저장\n          localStorage.setItem('adminUser', JSON.stringify(adminUser));\n          commit('SET_LOADING', false);\n          return adminUser;\n        }\n\n        // 일반 사용자 처리 (Firebase 인증 없이 임시 처리)\n        // Firebase 인증 오류 방지를 위해 임시 사용자 생성\n        if (email && email.includes('@') && password && password.length >= 6) {\n          const tempUser = {\n            id: 'user-' + Date.now(),\n            username: email.split('@')[0],\n            email: email,\n            is_admin: false,\n            created_at: new Date().toISOString()\n          };\n          commit('SET_USER', tempUser);\n          localStorage.setItem('tempUser', JSON.stringify(tempUser));\n          commit('SET_LOADING', false);\n          return tempUser;\n        } else {\n          throw new Error('유효한 이메일과 6자 이상의 비밀번호를 입력해주세요.');\n        }\n\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase 인증 후 사용자 정보 설정\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        const q = query(userRef, where('email', '==', userCredential.user.email))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        if (!querySnapshot.empty) {\r\n          // 기존 사용자 정보 가져오기\r\n          const userData = querySnapshot.docs[0].data()\r\n          const user = {\r\n            id: querySnapshot.docs[0].id,\r\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userData.is_admin || false\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        } else {\r\n          // 새 사용자 정보 생성\r\n          const newUser = {\r\n            username: userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userCredential.user.email === 'admin@example.com', // 관리자 계정 설정\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          const docRef = await addDoc(userRef, newUser)\r\n          const user = {\r\n            id: docRef.id,\r\n            ...newUser\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        }\r\n        */\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 회원가입\n    async register({\n      commit\n    }, {\n      username,\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const auth = getAuth();\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n        // Firebase Firestore에 사용자 정보 저장\n        const db = getFirestore();\n        const userRef = collection(db, 'users');\n        const newUser = {\n          username,\n          email: userCredential.user.email,\n          is_admin: email === 'admin@example.com',\n          // 관리자 계정 설정\n          created_at: new Date().toISOString()\n        };\n        const docRef = await addDoc(userRef, newUser);\n        const user = {\n          id: docRef.id,\n          ...newUser\n        };\n        commit('SET_USER', user);\n        commit('SET_LOADING', false);\n        return user;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 로그아웃\n    async logout({\n      commit\n    }) {\n      try {\n        // 로컬 스토리지에서 관리자 계정 정보 삭제\n        localStorage.removeItem('adminUser');\n        // 로컬 스토리지에서 임시 사용자 정보 삭제\n        localStorage.removeItem('tempUser');\n\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        await signOut(auth)\r\n        */\n\n        commit('SET_USER', null);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        throw error;\n      }\n    },\n    // 시나리오 목록 가져오기\n    async fetchScenarios({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // Firebase Firestore에서 시나리오 목록 가져오기\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const q = query(scenariosRef, orderBy('created_at', 'desc'));\n        const querySnapshot = await getDocs(q);\n        const scenarios = [];\n        querySnapshot.forEach(doc => {\n          scenarios.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        commit('SET_SCENARIOS', scenarios);\n        commit('SET_LOADING', false);\n        return scenarios;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 상세 정보 가져오기\n    async fetchScenario({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        console.log(`시나리오 ID ${id} 조회 중...`);\n\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\n        const db = getFirestore();\n        const scenarioRef = doc(db, 'scenarios', id);\n        const docSnap = await getDoc(scenarioRef);\n        if (docSnap.exists()) {\n          const scenario = {\n            id: docSnap.id,\n            ...docSnap.data()\n          };\n          console.log('조회된 시나리오:', scenario);\n\n          // 환자와의 대화가 없는 경우 기본 대화 설정\n          if (!scenario.patient_conversation) {\n            console.warn('환자와의 대화가 없습니다. 기본 대화를 설정합니다.');\n            scenario.patient_conversation = `\n# 환자와의 대화\n\n## 초기 평가\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\n\n**환자**: (증상에 따른 반응)\n\n**간호사**: 언제부터 이런 증상이 있었나요?\n\n**환자**: (증상 시작 시점 설명)\n\n## 검사 및 치료 중\n**간호사**: (검사 결과나 치료 계획 설명)\n\n**환자**: (환자의 반응과 질문)\n\n**간호사**: (추가 설명 및 안심시키기)\n\n## 회복기\n**간호사**: (상태 호전에 대한 피드백)\n\n**환자**: (환자의 소감 및 질문)\n\n**간호사**: (교육 및 추후 관리 안내)\n            `;\n          }\n          commit('SET_CURRENT_SCENARIO', scenario);\n          commit('SET_LOADING', false);\n          return scenario;\n        } else {\n          throw new Error('시나리오를 찾을 수 없습니다.');\n        }\n      } catch (error) {\n        console.error('시나리오 조회 실패:', error);\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 생성\n    async createScenario({\n      commit,\n      getters\n    }, scenarioData) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // 사용자가 로그인되어 있는지 확인\n        if (!getters.isLoggedIn) {\n          throw new Error('로그인이 필요합니다.');\n        }\n        console.log('시나리오 생성 요청 데이터:', scenarioData);\n\n        // OpenAI API를 통해 시나리오 생성\n        const response = await axios.post('/api/scenarios/generate/', {\n          ...scenarioData,\n          age: scenarioData.age || '30',\n          // 나이 수동 입력 지원\n          past_medical_history: scenarioData.past_medical_history || '없음',\n          family_history: scenarioData.family_history || '없음',\n          allergies: scenarioData.allergies || '없음',\n          major_symptoms: scenarioData.major_symptoms || '없음',\n          include_conversation: true // 환자와의 대화 포함 요청\n        });\n        console.log('시나리오 생성 응답:', response.data);\n\n        // 응답에서 환자와의 대화 확인\n        if (!response.data.patient_conversation) {\n          console.warn('환자와의 대화가 응답에 포함되어 있지 않습니다.');\n        }\n\n        // Firebase Firestore에 시나리오 저장\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const newScenario = {\n          title: scenarioData.title,\n          main_disease: scenarioData.main_disease,\n          personal_info: {\n            ...scenarioData.personal_info,\n            age: scenarioData.age || '30'\n          },\n          additional_info: {\n            ...scenarioData.additional_info,\n            past_medical_history: scenarioData.past_medical_history || '없음',\n            family_history: scenarioData.family_history || '없음',\n            allergies: scenarioData.allergies || '없음',\n            major_symptoms: scenarioData.major_symptoms || '없음'\n          },\n          content: response.data.content,\n          patient_conversation: response.data.patient_conversation || `\n# 환자와의 대화\n\n## 초기 평가\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\n\n**환자**: (증상에 따른 반응)\n\n**간호사**: 언제부터 이런 증상이 있었나요?\n\n**환자**: (증상 시작 시점 설명)\n\n## 검사 및 치료 중\n**간호사**: (검사 결과나 치료 계획 설명)\n\n**환자**: (환자의 반응과 질문)\n\n**간호사**: (추가 설명 및 안심시키기)\n\n## 회복기\n**간호사**: (상태 호전에 대한 피드백)\n\n**환자**: (환자의 소감 및 질문)\n\n**간호사**: (교육 및 추후 관리 안내)\n          `,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(scenariosRef, newScenario);\n        const scenario = {\n          id: docRef.id,\n          ...newScenario\n        };\n        commit('SET_LOADING', false);\n        return scenario;\n      } catch (error) {\n        console.error('시나리오 생성 실패:', error);\n        commit('SET_ERROR', error.message || '시나리오 생성 중 오류가 발생했습니다.');\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 수정\n    async modifyScenario({\n      commit,\n      getters\n    }, {\n      scenarioId,\n      userInput\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // OpenAI API를 통해 시나리오 수정\n        const response = await axios.post('/api/modifications/modify/', {\n          scenario_id: scenarioId,\n          user_input: userInput\n        });\n\n        // Firebase Firestore에 수정 기록 저장\n        const db = getFirestore();\n        const modificationsRef = collection(db, 'modifications');\n        const modification = {\n          scenario_id: scenarioId,\n          user_input: userInput,\n          modified_content: response.data.modified_content,\n          created_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(modificationsRef, modification);\n\n        // 시나리오 내용 업데이트\n        const scenarioRef = doc(db, 'scenarios', scenarioId);\n        await updateDoc(scenarioRef, {\n          content: response.data.modified_content,\n          updated_at: new Date().toISOString()\n        });\n\n        // 현재 시나리오 업데이트\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\n          const updatedScenario = {\n            ...getters.currentScenario,\n            content: response.data.modified_content,\n            updated_at: new Date().toISOString()\n          };\n          commit('SET_CURRENT_SCENARIO', updatedScenario);\n        }\n        commit('SET_LOADING', false);\n        return {\n          id: docRef.id,\n          ...modification\n        };\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","collection","addDoc","getDocs","doc","getDoc","updateDoc","query","orderBy","where","defaults","baseURL","process","env","VUE_APP_API_URL","interceptors","request","use","config","adminUser","localStorage","getItem","tempUser","user","JSON","parse","headers","email","error","Promise","reject","response","status","console","data","store","state","scenarios","currentScenario","loading","getters","isLoggedIn","currentUser","isAdmin","is_admin","isLoading","mutations","SET_USER","SET_SCENARIOS","SET_CURRENT_SCENARIO","scenario","SET_LOADING","SET_ERROR","CLEAR_ERROR","actions","checkAuth","commit","login","password","id","username","setItem","stringify","includes","length","Date","now","split","created_at","toISOString","Error","message","register","auth","userCredential","db","userRef","newUser","docRef","logout","removeItem","fetchScenarios","scenariosRef","q","querySnapshot","forEach","push","fetchScenario","log","scenarioRef","docSnap","exists","patient_conversation","warn","createScenario","scenarioData","post","age","past_medical_history","family_history","allergies","major_symptoms","include_conversation","newScenario","title","main_disease","personal_info","additional_info","content","updated_at","created_by","modifyScenario","scenarioId","userInput","scenario_id","user_input","modificationsRef","modification","modified_content","updatedScenario"],"sources":["D:/간호시뮬레이션/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth'\r\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore'\r\n\r\n// API 기본 URL 설정\r\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000'\r\n\r\n// axios 인터셉터 설정\r\naxios.interceptors.request.use(\r\n  config => {\r\n    // 로컬 스토리지에서 사용자 정보 가져오기\r\n    const adminUser = localStorage.getItem('adminUser')\r\n    const tempUser = localStorage.getItem('tempUser')\r\n    const user = adminUser ? JSON.parse(adminUser) : (tempUser ? JSON.parse(tempUser) : null)\r\n    \r\n    // 사용자가 로그인한 경우 헤더에 인증 정보 추가\r\n    if (user) {\r\n      // 실제 토큰이 없으므로 임시 인증 헤더 추가\r\n      config.headers['Authorization'] = `Bearer dummy-token-for-${user.email}`\r\n    } else {\r\n      // 사용자 정보가 없는 경우에도 임시 인증 헤더 추가 (401 에러 방지)\r\n      config.headers['Authorization'] = `Bearer dummy-token-for-anonymous`\r\n    }\r\n    \r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 응답 인터셉터 설정\r\naxios.interceptors.response.use(\r\n  response => {\r\n    return response\r\n  },\r\n  error => {\r\n    // 401 에러 처리 (인증 실패)\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('인증 오류가 발생했습니다:', error.response.data)\r\n      \r\n      // 로그인 페이지로 이동하는 대신 콘솔에 오류 메시지만 출력\r\n      // 로컬 스토리지와 사용자 정보는 유지\r\n      // 로그인 페이지로 리다이렉트하지 않음\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nconst store = createStore({\r\n  state: {\r\n    user: null,\r\n    scenarios: [],\r\n    currentScenario: null,\r\n    loading: false,\r\n    error: null\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.user,\r\n    currentUser: state => state.user,\r\n    isAdmin: state => state.user && state.user.is_admin,\r\n    scenarios: state => state.scenarios,\r\n    currentScenario: state => state.currentScenario,\r\n    isLoading: state => state.loading,\r\n    error: state => state.error\r\n  },\r\n  mutations: {\r\n    SET_USER(state, user) {\r\n      state.user = user\r\n    },\r\n    SET_SCENARIOS(state, scenarios) {\r\n      state.scenarios = scenarios\r\n    },\r\n    SET_CURRENT_SCENARIO(state, scenario) {\r\n      state.currentScenario = scenario\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    },\r\n    SET_ERROR(state, error) {\r\n      state.error = error\r\n    },\r\n    CLEAR_ERROR(state) {\r\n      state.error = null\r\n    }\r\n  },\r\n  actions: {\r\n    // 인증 상태 확인\r\n    checkAuth({ commit }) {\r\n      // 로컬 스토리지에서 관리자 로그인 상태 확인\r\n      const adminUser = localStorage.getItem('adminUser')\r\n      if (adminUser) {\r\n        commit('SET_USER', JSON.parse(adminUser))\r\n        return\r\n      }\r\n      \r\n      // 로컬 스토리지에서 임시 사용자 로그인 상태 확인\r\n      const tempUser = localStorage.getItem('tempUser')\r\n      if (tempUser) {\r\n        commit('SET_USER', JSON.parse(tempUser))\r\n        return\r\n      }\r\n      \r\n      /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n      const auth = getAuth()\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          try {\r\n            // Firebase 인증 후 사용자 정보 설정\r\n            const db = getFirestore()\r\n            const userRef = collection(db, 'users')\r\n            const q = query(userRef, where('email', '==', user.email))\r\n            const querySnapshot = await getDocs(q)\r\n            \r\n            if (!querySnapshot.empty) {\r\n              // 기존 사용자 정보 가져오기\r\n              const userData = querySnapshot.docs[0].data()\r\n              commit('SET_USER', {\r\n                id: querySnapshot.docs[0].id,\r\n                username: userData.username || user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: userData.is_admin || false\r\n              })\r\n            } else {\r\n              // 새 사용자 정보 생성\r\n              const newUser = {\r\n                username: user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: user.email === 'admin@example.com', // 관리자 계정 설정\r\n                created_at: new Date().toISOString()\r\n              }\r\n              \r\n              const docRef = await addDoc(userRef, newUser)\r\n              commit('SET_USER', {\r\n                id: docRef.id,\r\n                ...newUser\r\n              })\r\n            }\r\n          } catch (error) {\r\n            console.error('사용자 정보 가져오기 실패:', error)\r\n            commit('SET_USER', null)\r\n          }\r\n        } else {\r\n          commit('SET_USER', null)\r\n        }\r\n      })\r\n      */\r\n    },\r\n    \r\n    // 로그인\r\n    async login({ commit }, { email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // 관리자 계정 특별 처리 (admin@example.com / password123!)\r\n        if (email === 'admin@example.com' && password === 'password123!') {\r\n          const adminUser = {\r\n            id: 'admin-user-id',\r\n            username: 'Admin',\r\n            email: 'admin@example.com',\r\n            is_admin: true\r\n          }\r\n          commit('SET_USER', adminUser)\r\n          // 관리자 계정 정보를 로컬 스토리지에 저장\r\n          localStorage.setItem('adminUser', JSON.stringify(adminUser))\r\n          commit('SET_LOADING', false)\r\n          return adminUser\r\n        }\r\n        \r\n        // 일반 사용자 처리 (Firebase 인증 없이 임시 처리)\r\n        // Firebase 인증 오류 방지를 위해 임시 사용자 생성\r\n        if (email && email.includes('@') && password && password.length >= 6) {\r\n          const tempUser = {\r\n            id: 'user-' + Date.now(),\r\n            username: email.split('@')[0],\r\n            email: email,\r\n            is_admin: false,\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          commit('SET_USER', tempUser)\r\n          localStorage.setItem('tempUser', JSON.stringify(tempUser))\r\n          commit('SET_LOADING', false)\r\n          return tempUser\r\n        } else {\r\n          throw new Error('유효한 이메일과 6자 이상의 비밀번호를 입력해주세요.')\r\n        }\r\n        \r\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase 인증 후 사용자 정보 설정\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        const q = query(userRef, where('email', '==', userCredential.user.email))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        if (!querySnapshot.empty) {\r\n          // 기존 사용자 정보 가져오기\r\n          const userData = querySnapshot.docs[0].data()\r\n          const user = {\r\n            id: querySnapshot.docs[0].id,\r\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userData.is_admin || false\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        } else {\r\n          // 새 사용자 정보 생성\r\n          const newUser = {\r\n            username: userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userCredential.user.email === 'admin@example.com', // 관리자 계정 설정\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          const docRef = await addDoc(userRef, newUser)\r\n          const user = {\r\n            id: docRef.id,\r\n            ...newUser\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        }\r\n        */\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 회원가입\r\n    async register({ commit }, { username, email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        const auth = getAuth()\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase Firestore에 사용자 정보 저장\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        \r\n        const newUser = {\r\n          username,\r\n          email: userCredential.user.email,\r\n          is_admin: email === 'admin@example.com', // 관리자 계정 설정\r\n          created_at: new Date().toISOString()\r\n        }\r\n        \r\n        const docRef = await addDoc(userRef, newUser)\r\n        const user = {\r\n          id: docRef.id,\r\n          ...newUser\r\n        }\r\n        \r\n        commit('SET_USER', user)\r\n        commit('SET_LOADING', false)\r\n        return user\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 로그아웃\r\n    async logout({ commit }) {\r\n      try {\r\n        // 로컬 스토리지에서 관리자 계정 정보 삭제\r\n        localStorage.removeItem('adminUser')\r\n        // 로컬 스토리지에서 임시 사용자 정보 삭제\r\n        localStorage.removeItem('tempUser')\r\n        \r\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        await signOut(auth)\r\n        */\r\n        \r\n        commit('SET_USER', null)\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 목록 가져오기\r\n    async fetchScenarios({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // Firebase Firestore에서 시나리오 목록 가져오기\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        const q = query(scenariosRef, orderBy('created_at', 'desc'))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        const scenarios = []\r\n        querySnapshot.forEach((doc) => {\r\n          scenarios.push({\r\n            id: doc.id,\r\n            ...doc.data()\r\n          })\r\n        })\r\n        \r\n        commit('SET_SCENARIOS', scenarios)\r\n        commit('SET_LOADING', false)\r\n        return scenarios\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 상세 정보 가져오기\r\n    async fetchScenario({ commit }, id) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        console.log(`시나리오 ID ${id} 조회 중...`)\r\n        \r\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\r\n        const db = getFirestore()\r\n        const scenarioRef = doc(db, 'scenarios', id)\r\n        const docSnap = await getDoc(scenarioRef)\r\n        \r\n        if (docSnap.exists()) {\r\n          const scenario = {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n          \r\n          console.log('조회된 시나리오:', scenario)\r\n          \r\n          // 환자와의 대화가 없는 경우 기본 대화 설정\r\n          if (!scenario.patient_conversation) {\r\n            console.warn('환자와의 대화가 없습니다. 기본 대화를 설정합니다.')\r\n            scenario.patient_conversation = `\r\n# 환자와의 대화\r\n\r\n## 초기 평가\r\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\r\n\r\n**환자**: (증상에 따른 반응)\r\n\r\n**간호사**: 언제부터 이런 증상이 있었나요?\r\n\r\n**환자**: (증상 시작 시점 설명)\r\n\r\n## 검사 및 치료 중\r\n**간호사**: (검사 결과나 치료 계획 설명)\r\n\r\n**환자**: (환자의 반응과 질문)\r\n\r\n**간호사**: (추가 설명 및 안심시키기)\r\n\r\n## 회복기\r\n**간호사**: (상태 호전에 대한 피드백)\r\n\r\n**환자**: (환자의 소감 및 질문)\r\n\r\n**간호사**: (교육 및 추후 관리 안내)\r\n            `\r\n          }\r\n          \r\n          commit('SET_CURRENT_SCENARIO', scenario)\r\n          commit('SET_LOADING', false)\r\n          return scenario\r\n        } else {\r\n          throw new Error('시나리오를 찾을 수 없습니다.')\r\n        }\r\n      } catch (error) {\r\n        console.error('시나리오 조회 실패:', error)\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 생성\r\n    async createScenario({ commit, getters }, scenarioData) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // 사용자가 로그인되어 있는지 확인\r\n        if (!getters.isLoggedIn) {\r\n          throw new Error('로그인이 필요합니다.')\r\n        }\r\n        \r\n        console.log('시나리오 생성 요청 데이터:', scenarioData)\r\n        \r\n        // OpenAI API를 통해 시나리오 생성\r\n        const response = await axios.post('/api/scenarios/generate/', {\r\n          ...scenarioData,\r\n          age: scenarioData.age || '30', // 나이 수동 입력 지원\r\n          past_medical_history: scenarioData.past_medical_history || '없음',\r\n          family_history: scenarioData.family_history || '없음',\r\n          allergies: scenarioData.allergies || '없음',\r\n          major_symptoms: scenarioData.major_symptoms || '없음',\r\n          include_conversation: true // 환자와의 대화 포함 요청\r\n        })\r\n        \r\n        console.log('시나리오 생성 응답:', response.data)\r\n        \r\n        // 응답에서 환자와의 대화 확인\r\n        if (!response.data.patient_conversation) {\r\n          console.warn('환자와의 대화가 응답에 포함되어 있지 않습니다.')\r\n        }\r\n        \r\n        // Firebase Firestore에 시나리오 저장\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        \r\n        const newScenario = {\r\n          title: scenarioData.title,\r\n          main_disease: scenarioData.main_disease,\r\n          personal_info: {\r\n            ...scenarioData.personal_info,\r\n            age: scenarioData.age || '30'\r\n          },\r\n          additional_info: {\r\n            ...scenarioData.additional_info,\r\n            past_medical_history: scenarioData.past_medical_history || '없음',\r\n            family_history: scenarioData.family_history || '없음',\r\n            allergies: scenarioData.allergies || '없음',\r\n            major_symptoms: scenarioData.major_symptoms || '없음'\r\n          },\r\n          content: response.data.content,\r\n          patient_conversation: response.data.patient_conversation || `\r\n# 환자와의 대화\r\n\r\n## 초기 평가\r\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\r\n\r\n**환자**: (증상에 따른 반응)\r\n\r\n**간호사**: 언제부터 이런 증상이 있었나요?\r\n\r\n**환자**: (증상 시작 시점 설명)\r\n\r\n## 검사 및 치료 중\r\n**간호사**: (검사 결과나 치료 계획 설명)\r\n\r\n**환자**: (환자의 반응과 질문)\r\n\r\n**간호사**: (추가 설명 및 안심시키기)\r\n\r\n## 회복기\r\n**간호사**: (상태 호전에 대한 피드백)\r\n\r\n**환자**: (환자의 소감 및 질문)\r\n\r\n**간호사**: (교육 및 추후 관리 안내)\r\n          `,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(scenariosRef, newScenario)\r\n        const scenario = {\r\n          id: docRef.id,\r\n          ...newScenario\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return scenario\r\n      } catch (error) {\r\n        console.error('시나리오 생성 실패:', error)\r\n        commit('SET_ERROR', error.message || '시나리오 생성 중 오류가 발생했습니다.')\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 수정\r\n    async modifyScenario({ commit, getters }, { scenarioId, userInput }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // OpenAI API를 통해 시나리오 수정\r\n        const response = await axios.post('/api/modifications/modify/', {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput\r\n        })\r\n        \r\n        // Firebase Firestore에 수정 기록 저장\r\n        const db = getFirestore()\r\n        const modificationsRef = collection(db, 'modifications')\r\n        \r\n        const modification = {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput,\r\n          modified_content: response.data.modified_content,\r\n          created_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(modificationsRef, modification)\r\n        \r\n        // 시나리오 내용 업데이트\r\n        const scenarioRef = doc(db, 'scenarios', scenarioId)\r\n        await updateDoc(scenarioRef, {\r\n          content: response.data.modified_content,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        \r\n        // 현재 시나리오 업데이트\r\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\r\n          const updatedScenario = {\r\n            ...getters.currentScenario,\r\n            content: response.data.modified_content,\r\n            updated_at: new Date().toISOString()\r\n          }\r\n          commit('SET_CURRENT_SCENARIO', updatedScenario)\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return {\r\n          id: docRef.id,\r\n          ...modification\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nexport default store\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,0BAA0B,EAAEC,8BAA8B,EAAEC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAChI,SAASC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,QAAQ,oBAAoB;;AAE7H;AACAf,KAAK,CAACgB,QAAQ,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,uBAAuB;;AAE/E;AACApB,KAAK,CAACqB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR;EACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,MAAME,IAAI,GAAGJ,SAAS,GAAGK,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC,GAAIG,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC,GAAG,IAAK;;EAEzF;EACA,IAAIC,IAAI,EAAE;IACR;IACAL,MAAM,CAACQ,OAAO,CAAC,eAAe,CAAC,GAAG,0BAA0BH,IAAI,CAACI,KAAK,EAAE;EAC1E,CAAC,MAAM;IACL;IACAT,MAAM,CAACQ,OAAO,CAAC,eAAe,CAAC,GAAG,kCAAkC;EACtE;EAEA,OAAOR,MAAM;AACf,CAAC,EACDU,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAlC,KAAK,CAACqB,YAAY,CAACgB,QAAQ,CAACd,GAAG,CAC7Bc,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDH,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDC,OAAO,CAACL,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,QAAQ,CAACG,IAAI,CAAC;;IAEpD;IACA;IACA;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMO,KAAK,GAAG1C,WAAW,CAAC;EACxB2C,KAAK,EAAE;IACLb,IAAI,EAAE,IAAI;IACVc,SAAS,EAAE,EAAE;IACbC,eAAe,EAAE,IAAI;IACrBC,OAAO,EAAE,KAAK;IACdX,KAAK,EAAE;EACT,CAAC;EACDY,OAAO,EAAE;IACPC,UAAU,EAAEL,KAAK,IAAI,CAAC,CAACA,KAAK,CAACb,IAAI;IACjCmB,WAAW,EAAEN,KAAK,IAAIA,KAAK,CAACb,IAAI;IAChCoB,OAAO,EAAEP,KAAK,IAAIA,KAAK,CAACb,IAAI,IAAIa,KAAK,CAACb,IAAI,CAACqB,QAAQ;IACnDP,SAAS,EAAED,KAAK,IAAIA,KAAK,CAACC,SAAS;IACnCC,eAAe,EAAEF,KAAK,IAAIA,KAAK,CAACE,eAAe;IAC/CO,SAAS,EAAET,KAAK,IAAIA,KAAK,CAACG,OAAO;IACjCX,KAAK,EAAEQ,KAAK,IAAIA,KAAK,CAACR;EACxB,CAAC;EACDkB,SAAS,EAAE;IACTC,QAAQA,CAACX,KAAK,EAAEb,IAAI,EAAE;MACpBa,KAAK,CAACb,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDyB,aAAaA,CAACZ,KAAK,EAAEC,SAAS,EAAE;MAC9BD,KAAK,CAACC,SAAS,GAAGA,SAAS;IAC7B,CAAC;IACDY,oBAAoBA,CAACb,KAAK,EAAEc,QAAQ,EAAE;MACpCd,KAAK,CAACE,eAAe,GAAGY,QAAQ;IAClC,CAAC;IACDC,WAAWA,CAACf,KAAK,EAAEG,OAAO,EAAE;MAC1BH,KAAK,CAACG,OAAO,GAAGA,OAAO;IACzB,CAAC;IACDa,SAASA,CAAChB,KAAK,EAAER,KAAK,EAAE;MACtBQ,KAAK,CAACR,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDyB,WAAWA,CAACjB,KAAK,EAAE;MACjBA,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACD0B,OAAO,EAAE;IACP;IACAC,SAASA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACpB;MACA,MAAMrC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,IAAIF,SAAS,EAAE;QACbqC,MAAM,CAAC,UAAU,EAAEhC,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC,CAAC;QACzC;MACF;;MAEA;MACA,MAAMG,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACjD,IAAIC,QAAQ,EAAE;QACZkC,MAAM,CAAC,UAAU,EAAEhC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC,CAAC;QACxC;MACF;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC;IAED;IACA,MAAMmC,KAAKA,CAAC;MAAED;IAAO,CAAC,EAAE;MAAE7B,KAAK;MAAE+B;IAAS,CAAC,EAAE;MAC3CF,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,IAAI7B,KAAK,KAAK,mBAAmB,IAAI+B,QAAQ,KAAK,cAAc,EAAE;UAChE,MAAMvC,SAAS,GAAG;YAChBwC,EAAE,EAAE,eAAe;YACnBC,QAAQ,EAAE,OAAO;YACjBjC,KAAK,EAAE,mBAAmB;YAC1BiB,QAAQ,EAAE;UACZ,CAAC;UACDY,MAAM,CAAC,UAAU,EAAErC,SAAS,CAAC;UAC7B;UACAC,YAAY,CAACyC,OAAO,CAAC,WAAW,EAAErC,IAAI,CAACsC,SAAS,CAAC3C,SAAS,CAAC,CAAC;UAC5DqC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAOrC,SAAS;QAClB;;QAEA;QACA;QACA,IAAIQ,KAAK,IAAIA,KAAK,CAACoC,QAAQ,CAAC,GAAG,CAAC,IAAIL,QAAQ,IAAIA,QAAQ,CAACM,MAAM,IAAI,CAAC,EAAE;UACpE,MAAM1C,QAAQ,GAAG;YACfqC,EAAE,EAAE,OAAO,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC;YACxBN,QAAQ,EAAEjC,KAAK,CAACwC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7BxC,KAAK,EAAEA,KAAK;YACZiB,QAAQ,EAAE,KAAK;YACfwB,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;UACrC,CAAC;UAEDb,MAAM,CAAC,UAAU,EAAElC,QAAQ,CAAC;UAC5BF,YAAY,CAACyC,OAAO,CAAC,UAAU,EAAErC,IAAI,CAACsC,SAAS,CAACxC,QAAQ,CAAC,CAAC;UAC1DkC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAOlC,QAAQ;QACjB,CAAC,MAAM;UACL,MAAM,IAAIgD,KAAK,CAAC,+BAA+B,CAAC;QAClD;;QAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC,OAAO1C,KAAK,EAAE;QACd4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClCf,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAM4C,QAAQA,CAAC;MAAEhB;IAAO,CAAC,EAAE;MAAEI,QAAQ;MAAEjC,KAAK;MAAE+B;IAAS,CAAC,EAAE;MACxDF,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF,MAAMiB,IAAI,GAAG9E,OAAO,CAAC,CAAC;QACtB,MAAM+E,cAAc,GAAG,MAAM7E,8BAA8B,CAAC4E,IAAI,EAAE9C,KAAK,EAAE+B,QAAQ,CAAC;;QAElF;QACA,MAAMiB,EAAE,GAAG3E,YAAY,CAAC,CAAC;QACzB,MAAM4E,OAAO,GAAG3E,UAAU,CAAC0E,EAAE,EAAE,OAAO,CAAC;QAEvC,MAAME,OAAO,GAAG;UACdjB,QAAQ;UACRjC,KAAK,EAAE+C,cAAc,CAACnD,IAAI,CAACI,KAAK;UAChCiB,QAAQ,EAAEjB,KAAK,KAAK,mBAAmB;UAAE;UACzCyC,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACrC,CAAC;QAED,MAAMS,MAAM,GAAG,MAAM5E,MAAM,CAAC0E,OAAO,EAAEC,OAAO,CAAC;QAC7C,MAAMtD,IAAI,GAAG;UACXoC,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAGkB;QACL,CAAC;QAEDrB,MAAM,CAAC,UAAU,EAAEjC,IAAI,CAAC;QACxBiC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAOjC,IAAI;MACb,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClCf,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMmD,MAAMA,CAAC;MAAEvB;IAAO,CAAC,EAAE;MACvB,IAAI;QACF;QACApC,YAAY,CAAC4D,UAAU,CAAC,WAAW,CAAC;QACpC;QACA5D,YAAY,CAAC4D,UAAU,CAAC,UAAU,CAAC;;QAEnC;AACR;AACA;AACA;;QAEQxB,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAO5B,KAAK,EAAE;QACd4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClC,MAAM3C,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMqD,cAAcA,CAAC;MAAEzB;IAAO,CAAC,EAAE;MAC/BA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAMmB,EAAE,GAAG3E,YAAY,CAAC,CAAC;QACzB,MAAMkF,YAAY,GAAGjF,UAAU,CAAC0E,EAAE,EAAE,WAAW,CAAC;QAChD,MAAMQ,CAAC,GAAG5E,KAAK,CAAC2E,YAAY,EAAE1E,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC5D,MAAM4E,aAAa,GAAG,MAAMjF,OAAO,CAACgF,CAAC,CAAC;QAEtC,MAAM9C,SAAS,GAAG,EAAE;QACpB+C,aAAa,CAACC,OAAO,CAAEjF,GAAG,IAAK;UAC7BiC,SAAS,CAACiD,IAAI,CAAC;YACb3B,EAAE,EAAEvD,GAAG,CAACuD,EAAE;YACV,GAAGvD,GAAG,CAAC8B,IAAI,CAAC;UACd,CAAC,CAAC;QACJ,CAAC,CAAC;QAEFsB,MAAM,CAAC,eAAe,EAAEnB,SAAS,CAAC;QAClCmB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAOnB,SAAS;MAClB,CAAC,CAAC,OAAOT,KAAK,EAAE;QACd4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClCf,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAM2D,aAAaA,CAAC;MAAE/B;IAAO,CAAC,EAAEG,EAAE,EAAE;MAClCH,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACFvB,OAAO,CAACuD,GAAG,CAAC,WAAW7B,EAAE,UAAU,CAAC;;QAEpC;QACA,MAAMgB,EAAE,GAAG3E,YAAY,CAAC,CAAC;QACzB,MAAMyF,WAAW,GAAGrF,GAAG,CAACuE,EAAE,EAAE,WAAW,EAAEhB,EAAE,CAAC;QAC5C,MAAM+B,OAAO,GAAG,MAAMrF,MAAM,CAACoF,WAAW,CAAC;QAEzC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACpB,MAAMzC,QAAQ,GAAG;YACfS,EAAE,EAAE+B,OAAO,CAAC/B,EAAE;YACd,GAAG+B,OAAO,CAACxD,IAAI,CAAC;UAClB,CAAC;UAEDD,OAAO,CAACuD,GAAG,CAAC,WAAW,EAAEtC,QAAQ,CAAC;;UAElC;UACA,IAAI,CAACA,QAAQ,CAAC0C,oBAAoB,EAAE;YAClC3D,OAAO,CAAC4D,IAAI,CAAC,8BAA8B,CAAC;YAC5C3C,QAAQ,CAAC0C,oBAAoB,GAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;UACH;UAEApC,MAAM,CAAC,sBAAsB,EAAEN,QAAQ,CAAC;UACxCM,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAON,QAAQ;QACjB,CAAC,MAAM;UACL,MAAM,IAAIoB,KAAK,CAAC,kBAAkB,CAAC;QACrC;MACF,CAAC,CAAC,OAAO1C,KAAK,EAAE;QACdK,OAAO,CAACL,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;QACnC4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClCf,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMkE,cAAcA,CAAC;MAAEtC,MAAM;MAAEhB;IAAQ,CAAC,EAAEuD,YAAY,EAAE;MACtDvC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,IAAI,CAAChB,OAAO,CAACC,UAAU,EAAE;UACvB,MAAM,IAAI6B,KAAK,CAAC,aAAa,CAAC;QAChC;QAEArC,OAAO,CAACuD,GAAG,CAAC,iBAAiB,EAAEO,YAAY,CAAC;;QAE5C;QACA,MAAMhE,QAAQ,GAAG,MAAMrC,KAAK,CAACsG,IAAI,CAAC,0BAA0B,EAAE;UAC5D,GAAGD,YAAY;UACfE,GAAG,EAAEF,YAAY,CAACE,GAAG,IAAI,IAAI;UAAE;UAC/BC,oBAAoB,EAAEH,YAAY,CAACG,oBAAoB,IAAI,IAAI;UAC/DC,cAAc,EAAEJ,YAAY,CAACI,cAAc,IAAI,IAAI;UACnDC,SAAS,EAAEL,YAAY,CAACK,SAAS,IAAI,IAAI;UACzCC,cAAc,EAAEN,YAAY,CAACM,cAAc,IAAI,IAAI;UACnDC,oBAAoB,EAAE,IAAI,CAAC;QAC7B,CAAC,CAAC;QAEFrE,OAAO,CAACuD,GAAG,CAAC,aAAa,EAAEzD,QAAQ,CAACG,IAAI,CAAC;;QAEzC;QACA,IAAI,CAACH,QAAQ,CAACG,IAAI,CAAC0D,oBAAoB,EAAE;UACvC3D,OAAO,CAAC4D,IAAI,CAAC,4BAA4B,CAAC;QAC5C;;QAEA;QACA,MAAMlB,EAAE,GAAG3E,YAAY,CAAC,CAAC;QACzB,MAAMkF,YAAY,GAAGjF,UAAU,CAAC0E,EAAE,EAAE,WAAW,CAAC;QAEhD,MAAM4B,WAAW,GAAG;UAClBC,KAAK,EAAET,YAAY,CAACS,KAAK;UACzBC,YAAY,EAAEV,YAAY,CAACU,YAAY;UACvCC,aAAa,EAAE;YACb,GAAGX,YAAY,CAACW,aAAa;YAC7BT,GAAG,EAAEF,YAAY,CAACE,GAAG,IAAI;UAC3B,CAAC;UACDU,eAAe,EAAE;YACf,GAAGZ,YAAY,CAACY,eAAe;YAC/BT,oBAAoB,EAAEH,YAAY,CAACG,oBAAoB,IAAI,IAAI;YAC/DC,cAAc,EAAEJ,YAAY,CAACI,cAAc,IAAI,IAAI;YACnDC,SAAS,EAAEL,YAAY,CAACK,SAAS,IAAI,IAAI;YACzCC,cAAc,EAAEN,YAAY,CAACM,cAAc,IAAI;UACjD,CAAC;UACDO,OAAO,EAAE7E,QAAQ,CAACG,IAAI,CAAC0E,OAAO;UAC9BhB,oBAAoB,EAAE7D,QAAQ,CAACG,IAAI,CAAC0D,oBAAoB,IAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;UACDxB,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCwC,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCyC,UAAU,EAAE;YACVnD,EAAE,EAAEnB,OAAO,CAACE,WAAW,CAACiB,EAAE;YAC1BC,QAAQ,EAAEpB,OAAO,CAACE,WAAW,CAACkB,QAAQ;YACtCjC,KAAK,EAAEa,OAAO,CAACE,WAAW,CAACf,KAAK;YAChCiB,QAAQ,EAAEJ,OAAO,CAACE,WAAW,CAACE;UAChC;QACF,CAAC;QAED,MAAMkC,MAAM,GAAG,MAAM5E,MAAM,CAACgF,YAAY,EAAEqB,WAAW,CAAC;QACtD,MAAMrD,QAAQ,GAAG;UACfS,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAG4C;QACL,CAAC;QAED/C,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAON,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACdK,OAAO,CAACL,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;QACnC4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,IAAI,uBAAuB,CAAC;QAC7Df,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMmF,cAAcA,CAAC;MAAEvD,MAAM;MAAEhB;IAAQ,CAAC,EAAE;MAAEwE,UAAU;MAAEC;IAAU,CAAC,EAAE;MACnEzD,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAMzB,QAAQ,GAAG,MAAMrC,KAAK,CAACsG,IAAI,CAAC,4BAA4B,EAAE;UAC9DkB,WAAW,EAAEF,UAAU;UACvBG,UAAU,EAAEF;QACd,CAAC,CAAC;;QAEF;QACA,MAAMtC,EAAE,GAAG3E,YAAY,CAAC,CAAC;QACzB,MAAMoH,gBAAgB,GAAGnH,UAAU,CAAC0E,EAAE,EAAE,eAAe,CAAC;QAExD,MAAM0C,YAAY,GAAG;UACnBH,WAAW,EAAEF,UAAU;UACvBG,UAAU,EAAEF,SAAS;UACrBK,gBAAgB,EAAEvF,QAAQ,CAACG,IAAI,CAACoF,gBAAgB;UAChDlD,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCyC,UAAU,EAAE;YACVnD,EAAE,EAAEnB,OAAO,CAACE,WAAW,CAACiB,EAAE;YAC1BC,QAAQ,EAAEpB,OAAO,CAACE,WAAW,CAACkB,QAAQ;YACtCjC,KAAK,EAAEa,OAAO,CAACE,WAAW,CAACf,KAAK;YAChCiB,QAAQ,EAAEJ,OAAO,CAACE,WAAW,CAACE;UAChC;QACF,CAAC;QAED,MAAMkC,MAAM,GAAG,MAAM5E,MAAM,CAACkH,gBAAgB,EAAEC,YAAY,CAAC;;QAE3D;QACA,MAAM5B,WAAW,GAAGrF,GAAG,CAACuE,EAAE,EAAE,WAAW,EAAEqC,UAAU,CAAC;QACpD,MAAM1G,SAAS,CAACmF,WAAW,EAAE;UAC3BmB,OAAO,EAAE7E,QAAQ,CAACG,IAAI,CAACoF,gBAAgB;UACvCT,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACrC,CAAC,CAAC;;QAEF;QACA,IAAI7B,OAAO,CAACF,eAAe,IAAIE,OAAO,CAACF,eAAe,CAACqB,EAAE,KAAKqD,UAAU,EAAE;UACxE,MAAMO,eAAe,GAAG;YACtB,GAAG/E,OAAO,CAACF,eAAe;YAC1BsE,OAAO,EAAE7E,QAAQ,CAACG,IAAI,CAACoF,gBAAgB;YACvCT,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;UACrC,CAAC;UACDb,MAAM,CAAC,sBAAsB,EAAE+D,eAAe,CAAC;QACjD;QAEA/D,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAO;UACLG,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAG0D;QACL,CAAC;MACH,CAAC,CAAC,OAAOzF,KAAK,EAAE;QACd4B,MAAM,CAAC,WAAW,EAAE5B,KAAK,CAAC2C,OAAO,CAAC;QAClCf,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAM5B,KAAK;MACb;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAeO,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}