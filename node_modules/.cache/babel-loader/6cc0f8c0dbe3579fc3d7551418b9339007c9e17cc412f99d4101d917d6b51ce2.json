{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore';\n\n// API 기본 URL 설정\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000';\nexport default createStore({\n  state: {\n    user: null,\n    scenarios: [],\n    currentScenario: null,\n    loading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.is_admin,\n    scenarios: state => state.scenarios,\n    currentScenario: state => state.currentScenario,\n    isLoading: state => state.loading,\n    error: state => state.error\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    SET_SCENARIOS(state, scenarios) {\n      state.scenarios = scenarios;\n    },\n    SET_CURRENT_SCENARIO(state, scenario) {\n      state.currentScenario = scenario;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    // 인증 상태 확인\n    checkAuth({\n      commit\n    }) {\n      const auth = getAuth();\n      onAuthStateChanged(auth, async user => {\n        if (user) {\n          try {\n            // Firebase 인증 후 사용자 정보 설정\n            const db = getFirestore();\n            const userRef = collection(db, 'users');\n            const q = query(userRef, where('email', '==', user.email));\n            const querySnapshot = await getDocs(q);\n            if (!querySnapshot.empty) {\n              // 기존 사용자 정보 가져오기\n              const userData = querySnapshot.docs[0].data();\n              commit('SET_USER', {\n                id: querySnapshot.docs[0].id,\n                username: userData.username || user.displayName || user.email,\n                email: user.email,\n                is_admin: userData.is_admin || false\n              });\n            } else {\n              // 새 사용자 정보 생성\n              const newUser = {\n                username: user.displayName || user.email,\n                email: user.email,\n                is_admin: user.email === 'admin@example.com',\n                // 관리자 계정 설정\n                created_at: new Date().toISOString()\n              };\n              const docRef = await addDoc(userRef, newUser);\n              commit('SET_USER', {\n                id: docRef.id,\n                ...newUser\n              });\n            }\n          } catch (error) {\n            console.error('사용자 정보 가져오기 실패:', error);\n            commit('SET_USER', null);\n          }\n        } else {\n          commit('SET_USER', null);\n        }\n      });\n    },\n    // 로그인\n    async login({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const auth = getAuth();\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n        // Firebase 인증 후 사용자 정보 설정\n        const db = getFirestore();\n        const userRef = collection(db, 'users');\n        const q = query(userRef, where('email', '==', userCredential.user.email));\n        const querySnapshot = await getDocs(q);\n        if (!querySnapshot.empty) {\n          // 기존 사용자 정보 가져오기\n          const userData = querySnapshot.docs[0].data();\n          const user = {\n            id: querySnapshot.docs[0].id,\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\n            email: userCredential.user.email,\n            is_admin: userData.is_admin || false\n          };\n          commit('SET_USER', user);\n          commit('SET_LOADING', false);\n          return user;\n        } else {\n          // 새 사용자 정보 생성\n          const newUser = {\n            username: userCredential.user.displayName || userCredential.user.email,\n            email: userCredential.user.email,\n            is_admin: userCredential.user.email === 'admin@example.com',\n            // 관리자 계정 설정\n            created_at: new Date().toISOString()\n          };\n          const docRef = await addDoc(userRef, newUser);\n          const user = {\n            id: docRef.id,\n            ...newUser\n          };\n          commit('SET_USER', user);\n          commit('SET_LOADING', false);\n          return user;\n        }\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 회원가입\n    async register({\n      commit\n    }, {\n      username,\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const auth = getAuth();\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n        // Firebase Firestore에 사용자 정보 저장\n        const db = getFirestore();\n        const userRef = collection(db, 'users');\n        const newUser = {\n          username,\n          email: userCredential.user.email,\n          is_admin: email === 'admin@example.com',\n          // 관리자 계정 설정\n          created_at: new Date().toISOString()\n        };\n        const docRef = await addDoc(userRef, newUser);\n        const user = {\n          id: docRef.id,\n          ...newUser\n        };\n        commit('SET_USER', user);\n        commit('SET_LOADING', false);\n        return user;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 로그아웃\n    async logout({\n      commit\n    }) {\n      try {\n        const auth = getAuth();\n        await signOut(auth);\n        commit('SET_USER', null);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        throw error;\n      }\n    },\n    // 시나리오 목록 가져오기\n    async fetchScenarios({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // Firebase Firestore에서 시나리오 목록 가져오기\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const q = query(scenariosRef, orderBy('created_at', 'desc'));\n        const querySnapshot = await getDocs(q);\n        const scenarios = [];\n        querySnapshot.forEach(doc => {\n          scenarios.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        commit('SET_SCENARIOS', scenarios);\n        commit('SET_LOADING', false);\n        return scenarios;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 상세 정보 가져오기\n    async fetchScenario({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\n        const db = getFirestore();\n        const scenarioRef = doc(db, 'scenarios', id);\n        const docSnap = await getDoc(scenarioRef);\n        if (docSnap.exists()) {\n          const scenario = {\n            id: docSnap.id,\n            ...docSnap.data()\n          };\n          commit('SET_CURRENT_SCENARIO', scenario);\n          commit('SET_LOADING', false);\n          return scenario;\n        } else {\n          throw new Error('시나리오를 찾을 수 없습니다.');\n        }\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 생성\n    async createScenario({\n      commit,\n      getters\n    }, scenarioData) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // OpenAI API를 통해 시나리오 생성\n        const response = await axios.post('/api/scenarios/generate/', {\n          ...scenarioData,\n          age: scenarioData.age || '30',\n          // 나이 수동 입력 지원\n          past_medical_history: scenarioData.past_medical_history || '없음',\n          family_history: scenarioData.family_history || '없음',\n          allergies: scenarioData.allergies || '없음',\n          major_symptoms: scenarioData.major_symptoms || '없음'\n        });\n\n        // Firebase Firestore에 시나리오 저장\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const newScenario = {\n          title: scenarioData.title,\n          main_disease: scenarioData.main_disease,\n          personal_info: {\n            ...scenarioData.personal_info,\n            age: scenarioData.age || '30'\n          },\n          additional_info: {\n            ...scenarioData.additional_info,\n            past_medical_history: scenarioData.past_medical_history || '없음',\n            family_history: scenarioData.family_history || '없음',\n            allergies: scenarioData.allergies || '없음',\n            major_symptoms: scenarioData.major_symptoms || '없음'\n          },\n          content: response.data.content,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(scenariosRef, newScenario);\n        const scenario = {\n          id: docRef.id,\n          ...newScenario\n        };\n        commit('SET_LOADING', false);\n        return scenario;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 수정\n    async modifyScenario({\n      commit,\n      getters\n    }, {\n      scenarioId,\n      userInput\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // OpenAI API를 통해 시나리오 수정\n        const response = await axios.post('/api/modifications/modify/', {\n          scenario_id: scenarioId,\n          user_input: userInput\n        });\n\n        // Firebase Firestore에 수정 기록 저장\n        const db = getFirestore();\n        const modificationsRef = collection(db, 'modifications');\n        const modification = {\n          scenario_id: scenarioId,\n          user_input: userInput,\n          modified_content: response.data.modified_content,\n          created_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(modificationsRef, modification);\n\n        // 시나리오 내용 업데이트\n        const scenarioRef = doc(db, 'scenarios', scenarioId);\n        await updateDoc(scenarioRef, {\n          content: response.data.modified_content,\n          updated_at: new Date().toISOString()\n        });\n\n        // 현재 시나리오 업데이트\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\n          const updatedScenario = {\n            ...getters.currentScenario,\n            content: response.data.modified_content,\n            updated_at: new Date().toISOString()\n          };\n          commit('SET_CURRENT_SCENARIO', updatedScenario);\n        }\n        commit('SET_LOADING', false);\n        return {\n          id: docRef.id,\n          ...modification\n        };\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","collection","addDoc","getDocs","doc","getDoc","updateDoc","query","orderBy","where","defaults","baseURL","process","env","VUE_APP_API_URL","state","user","scenarios","currentScenario","loading","error","getters","isLoggedIn","currentUser","isAdmin","is_admin","isLoading","mutations","SET_USER","SET_SCENARIOS","SET_CURRENT_SCENARIO","scenario","SET_LOADING","SET_ERROR","CLEAR_ERROR","actions","checkAuth","commit","auth","db","userRef","q","email","querySnapshot","empty","userData","docs","data","id","username","displayName","newUser","created_at","Date","toISOString","docRef","console","login","password","userCredential","message","register","logout","fetchScenarios","scenariosRef","forEach","push","fetchScenario","scenarioRef","docSnap","exists","Error","createScenario","scenarioData","response","post","age","past_medical_history","family_history","allergies","major_symptoms","newScenario","title","main_disease","personal_info","additional_info","content","updated_at","created_by","modifyScenario","scenarioId","userInput","scenario_id","user_input","modificationsRef","modification","modified_content","updatedScenario"],"sources":["D:/간호시뮬레이션/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth'\r\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore'\r\n\r\n// API 기본 URL 설정\r\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000'\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: null,\r\n    scenarios: [],\r\n    currentScenario: null,\r\n    loading: false,\r\n    error: null\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.user,\r\n    currentUser: state => state.user,\r\n    isAdmin: state => state.user && state.user.is_admin,\r\n    scenarios: state => state.scenarios,\r\n    currentScenario: state => state.currentScenario,\r\n    isLoading: state => state.loading,\r\n    error: state => state.error\r\n  },\r\n  mutations: {\r\n    SET_USER(state, user) {\r\n      state.user = user\r\n    },\r\n    SET_SCENARIOS(state, scenarios) {\r\n      state.scenarios = scenarios\r\n    },\r\n    SET_CURRENT_SCENARIO(state, scenario) {\r\n      state.currentScenario = scenario\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    },\r\n    SET_ERROR(state, error) {\r\n      state.error = error\r\n    },\r\n    CLEAR_ERROR(state) {\r\n      state.error = null\r\n    }\r\n  },\r\n  actions: {\r\n    // 인증 상태 확인\r\n    checkAuth({ commit }) {\r\n      const auth = getAuth()\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          try {\r\n            // Firebase 인증 후 사용자 정보 설정\r\n            const db = getFirestore()\r\n            const userRef = collection(db, 'users')\r\n            const q = query(userRef, where('email', '==', user.email))\r\n            const querySnapshot = await getDocs(q)\r\n            \r\n            if (!querySnapshot.empty) {\r\n              // 기존 사용자 정보 가져오기\r\n              const userData = querySnapshot.docs[0].data()\r\n              commit('SET_USER', {\r\n                id: querySnapshot.docs[0].id,\r\n                username: userData.username || user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: userData.is_admin || false\r\n              })\r\n            } else {\r\n              // 새 사용자 정보 생성\r\n              const newUser = {\r\n                username: user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: user.email === 'admin@example.com', // 관리자 계정 설정\r\n                created_at: new Date().toISOString()\r\n              }\r\n              \r\n              const docRef = await addDoc(userRef, newUser)\r\n              commit('SET_USER', {\r\n                id: docRef.id,\r\n                ...newUser\r\n              })\r\n            }\r\n          } catch (error) {\r\n            console.error('사용자 정보 가져오기 실패:', error)\r\n            commit('SET_USER', null)\r\n          }\r\n        } else {\r\n          commit('SET_USER', null)\r\n        }\r\n      })\r\n    },\r\n    \r\n    // 로그인\r\n    async login({ commit }, { email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        const auth = getAuth()\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase 인증 후 사용자 정보 설정\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        const q = query(userRef, where('email', '==', userCredential.user.email))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        if (!querySnapshot.empty) {\r\n          // 기존 사용자 정보 가져오기\r\n          const userData = querySnapshot.docs[0].data()\r\n          const user = {\r\n            id: querySnapshot.docs[0].id,\r\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userData.is_admin || false\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        } else {\r\n          // 새 사용자 정보 생성\r\n          const newUser = {\r\n            username: userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userCredential.user.email === 'admin@example.com', // 관리자 계정 설정\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          const docRef = await addDoc(userRef, newUser)\r\n          const user = {\r\n            id: docRef.id,\r\n            ...newUser\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 회원가입\r\n    async register({ commit }, { username, email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        const auth = getAuth()\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase Firestore에 사용자 정보 저장\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        \r\n        const newUser = {\r\n          username,\r\n          email: userCredential.user.email,\r\n          is_admin: email === 'admin@example.com', // 관리자 계정 설정\r\n          created_at: new Date().toISOString()\r\n        }\r\n        \r\n        const docRef = await addDoc(userRef, newUser)\r\n        const user = {\r\n          id: docRef.id,\r\n          ...newUser\r\n        }\r\n        \r\n        commit('SET_USER', user)\r\n        commit('SET_LOADING', false)\r\n        return user\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 로그아웃\r\n    async logout({ commit }) {\r\n      try {\r\n        const auth = getAuth()\r\n        await signOut(auth)\r\n        commit('SET_USER', null)\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 목록 가져오기\r\n    async fetchScenarios({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // Firebase Firestore에서 시나리오 목록 가져오기\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        const q = query(scenariosRef, orderBy('created_at', 'desc'))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        const scenarios = []\r\n        querySnapshot.forEach((doc) => {\r\n          scenarios.push({\r\n            id: doc.id,\r\n            ...doc.data()\r\n          })\r\n        })\r\n        \r\n        commit('SET_SCENARIOS', scenarios)\r\n        commit('SET_LOADING', false)\r\n        return scenarios\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 상세 정보 가져오기\r\n    async fetchScenario({ commit }, id) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\r\n        const db = getFirestore()\r\n        const scenarioRef = doc(db, 'scenarios', id)\r\n        const docSnap = await getDoc(scenarioRef)\r\n        \r\n        if (docSnap.exists()) {\r\n          const scenario = {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n          commit('SET_CURRENT_SCENARIO', scenario)\r\n          commit('SET_LOADING', false)\r\n          return scenario\r\n        } else {\r\n          throw new Error('시나리오를 찾을 수 없습니다.')\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 생성\r\n    async createScenario({ commit, getters }, scenarioData) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // OpenAI API를 통해 시나리오 생성\r\n        const response = await axios.post('/api/scenarios/generate/', {\r\n          ...scenarioData,\r\n          age: scenarioData.age || '30', // 나이 수동 입력 지원\r\n          past_medical_history: scenarioData.past_medical_history || '없음',\r\n          family_history: scenarioData.family_history || '없음',\r\n          allergies: scenarioData.allergies || '없음',\r\n          major_symptoms: scenarioData.major_symptoms || '없음'\r\n        })\r\n        \r\n        // Firebase Firestore에 시나리오 저장\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        \r\n        const newScenario = {\r\n          title: scenarioData.title,\r\n          main_disease: scenarioData.main_disease,\r\n          personal_info: {\r\n            ...scenarioData.personal_info,\r\n            age: scenarioData.age || '30'\r\n          },\r\n          additional_info: {\r\n            ...scenarioData.additional_info,\r\n            past_medical_history: scenarioData.past_medical_history || '없음',\r\n            family_history: scenarioData.family_history || '없음',\r\n            allergies: scenarioData.allergies || '없음',\r\n            major_symptoms: scenarioData.major_symptoms || '없음'\r\n          },\r\n          content: response.data.content,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(scenariosRef, newScenario)\r\n        const scenario = {\r\n          id: docRef.id,\r\n          ...newScenario\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return scenario\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 수정\r\n    async modifyScenario({ commit, getters }, { scenarioId, userInput }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // OpenAI API를 통해 시나리오 수정\r\n        const response = await axios.post('/api/modifications/modify/', {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput\r\n        })\r\n        \r\n        // Firebase Firestore에 수정 기록 저장\r\n        const db = getFirestore()\r\n        const modificationsRef = collection(db, 'modifications')\r\n        \r\n        const modification = {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput,\r\n          modified_content: response.data.modified_content,\r\n          created_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(modificationsRef, modification)\r\n        \r\n        // 시나리오 내용 업데이트\r\n        const scenarioRef = doc(db, 'scenarios', scenarioId)\r\n        await updateDoc(scenarioRef, {\r\n          content: response.data.modified_content,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        \r\n        // 현재 시나리오 업데이트\r\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\r\n          const updatedScenario = {\r\n            ...getters.currentScenario,\r\n            content: response.data.modified_content,\r\n            updated_at: new Date().toISOString()\r\n          }\r\n          commit('SET_CURRENT_SCENARIO', updatedScenario)\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return {\r\n          id: docRef.id,\r\n          ...modification\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}