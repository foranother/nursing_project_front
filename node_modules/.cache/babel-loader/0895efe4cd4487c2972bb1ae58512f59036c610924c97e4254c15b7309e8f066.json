{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore';\n\n// API 기본 URL 설정\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000';\nexport default createStore({\n  state: {\n    user: null,\n    scenarios: [],\n    currentScenario: null,\n    loading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.is_admin,\n    scenarios: state => state.scenarios,\n    currentScenario: state => state.currentScenario,\n    isLoading: state => state.loading,\n    error: state => state.error\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    SET_SCENARIOS(state, scenarios) {\n      state.scenarios = scenarios;\n    },\n    SET_CURRENT_SCENARIO(state, scenario) {\n      state.currentScenario = scenario;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    // 인증 상태 확인\n    checkAuth({\n      commit\n    }) {\n      // 로컬 스토리지에서 관리자 로그인 상태 확인\n      const adminUser = localStorage.getItem('adminUser');\n      if (adminUser) {\n        commit('SET_USER', JSON.parse(adminUser));\n        return;\n      }\n\n      // 로컬 스토리지에서 임시 사용자 로그인 상태 확인\n      const tempUser = localStorage.getItem('tempUser');\n      if (tempUser) {\n        commit('SET_USER', JSON.parse(tempUser));\n        return;\n      }\n\n      /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n      const auth = getAuth()\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          try {\r\n            // Firebase 인증 후 사용자 정보 설정\r\n            const db = getFirestore()\r\n            const userRef = collection(db, 'users')\r\n            const q = query(userRef, where('email', '==', user.email))\r\n            const querySnapshot = await getDocs(q)\r\n            \r\n            if (!querySnapshot.empty) {\r\n              // 기존 사용자 정보 가져오기\r\n              const userData = querySnapshot.docs[0].data()\r\n              commit('SET_USER', {\r\n                id: querySnapshot.docs[0].id,\r\n                username: userData.username || user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: userData.is_admin || false\r\n              })\r\n            } else {\r\n              // 새 사용자 정보 생성\r\n              const newUser = {\r\n                username: user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: user.email === 'admin@example.com', // 관리자 계정 설정\r\n                created_at: new Date().toISOString()\r\n              }\r\n              \r\n              const docRef = await addDoc(userRef, newUser)\r\n              commit('SET_USER', {\r\n                id: docRef.id,\r\n                ...newUser\r\n              })\r\n            }\r\n          } catch (error) {\r\n            console.error('사용자 정보 가져오기 실패:', error)\r\n            commit('SET_USER', null)\r\n          }\r\n        } else {\r\n          commit('SET_USER', null)\r\n        }\r\n      })\r\n      */\n    },\n    // 로그인\n    async login({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // 관리자 계정 특별 처리 (admin@example.com / password123!)\n        if (email === 'admin@example.com' && password === 'password123!') {\n          const adminUser = {\n            id: 'admin-user-id',\n            username: 'Admin',\n            email: 'admin@example.com',\n            is_admin: true\n          };\n          commit('SET_USER', adminUser);\n          // 관리자 계정 정보를 로컬 스토리지에 저장\n          localStorage.setItem('adminUser', JSON.stringify(adminUser));\n          commit('SET_LOADING', false);\n          return adminUser;\n        }\n\n        // 일반 사용자 처리 (Firebase 인증 없이 임시 처리)\n        // Firebase 인증 오류 방지를 위해 임시 사용자 생성\n        if (email && email.includes('@') && password && password.length >= 6) {\n          const tempUser = {\n            id: 'user-' + Date.now(),\n            username: email.split('@')[0],\n            email: email,\n            is_admin: false,\n            created_at: new Date().toISOString()\n          };\n          commit('SET_USER', tempUser);\n          localStorage.setItem('tempUser', JSON.stringify(tempUser));\n          commit('SET_LOADING', false);\n          return tempUser;\n        } else {\n          throw new Error('유효한 이메일과 6자 이상의 비밀번호를 입력해주세요.');\n        }\n\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase 인증 후 사용자 정보 설정\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        const q = query(userRef, where('email', '==', userCredential.user.email))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        if (!querySnapshot.empty) {\r\n          // 기존 사용자 정보 가져오기\r\n          const userData = querySnapshot.docs[0].data()\r\n          const user = {\r\n            id: querySnapshot.docs[0].id,\r\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userData.is_admin || false\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        } else {\r\n          // 새 사용자 정보 생성\r\n          const newUser = {\r\n            username: userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userCredential.user.email === 'admin@example.com', // 관리자 계정 설정\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          const docRef = await addDoc(userRef, newUser)\r\n          const user = {\r\n            id: docRef.id,\r\n            ...newUser\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        }\r\n        */\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 회원가입\n    async register({\n      commit\n    }, {\n      username,\n      email,\n      password\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const auth = getAuth();\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n        // Firebase Firestore에 사용자 정보 저장\n        const db = getFirestore();\n        const userRef = collection(db, 'users');\n        const newUser = {\n          username,\n          email: userCredential.user.email,\n          is_admin: email === 'admin@example.com',\n          // 관리자 계정 설정\n          created_at: new Date().toISOString()\n        };\n        const docRef = await addDoc(userRef, newUser);\n        const user = {\n          id: docRef.id,\n          ...newUser\n        };\n        commit('SET_USER', user);\n        commit('SET_LOADING', false);\n        return user;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 로그아웃\n    async logout({\n      commit\n    }) {\n      try {\n        // 로컬 스토리지에서 관리자 계정 정보 삭제\n        localStorage.removeItem('adminUser');\n        // 로컬 스토리지에서 임시 사용자 정보 삭제\n        localStorage.removeItem('tempUser');\n\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        await signOut(auth)\r\n        */\n\n        commit('SET_USER', null);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        throw error;\n      }\n    },\n    // 시나리오 목록 가져오기\n    async fetchScenarios({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // Firebase Firestore에서 시나리오 목록 가져오기\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const q = query(scenariosRef, orderBy('created_at', 'desc'));\n        const querySnapshot = await getDocs(q);\n        const scenarios = [];\n        querySnapshot.forEach(doc => {\n          scenarios.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        commit('SET_SCENARIOS', scenarios);\n        commit('SET_LOADING', false);\n        return scenarios;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 상세 정보 가져오기\n    async fetchScenario({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\n        const db = getFirestore();\n        const scenarioRef = doc(db, 'scenarios', id);\n        const docSnap = await getDoc(scenarioRef);\n        if (docSnap.exists()) {\n          const scenario = {\n            id: docSnap.id,\n            ...docSnap.data()\n          };\n          commit('SET_CURRENT_SCENARIO', scenario);\n          commit('SET_LOADING', false);\n          return scenario;\n        } else {\n          throw new Error('시나리오를 찾을 수 없습니다.');\n        }\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 생성\n    async createScenario({\n      commit,\n      getters\n    }, scenarioData) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // OpenAI API를 통해 시나리오 생성\n        const response = await axios.post('/api/scenarios/generate/', {\n          ...scenarioData,\n          age: scenarioData.age || '30',\n          // 나이 수동 입력 지원\n          past_medical_history: scenarioData.past_medical_history || '없음',\n          family_history: scenarioData.family_history || '없음',\n          allergies: scenarioData.allergies || '없음',\n          major_symptoms: scenarioData.major_symptoms || '없음',\n          include_conversation: true // 환자와의 대화 포함 요청\n        });\n\n        // Firebase Firestore에 시나리오 저장\n        const db = getFirestore();\n        const scenariosRef = collection(db, 'scenarios');\n        const newScenario = {\n          title: scenarioData.title,\n          main_disease: scenarioData.main_disease,\n          personal_info: {\n            ...scenarioData.personal_info,\n            age: scenarioData.age || '30'\n          },\n          additional_info: {\n            ...scenarioData.additional_info,\n            past_medical_history: scenarioData.past_medical_history || '없음',\n            family_history: scenarioData.family_history || '없음',\n            allergies: scenarioData.allergies || '없음',\n            major_symptoms: scenarioData.major_symptoms || '없음'\n          },\n          content: response.data.content,\n          patient_conversation: response.data.patient_conversation || `\n# 환자와의 대화\n\n## 초기 평가\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\n\n**환자**: (증상에 따른 반응)\n\n**간호사**: 언제부터 이런 증상이 있었나요?\n\n**환자**: (증상 시작 시점 설명)\n\n## 검사 및 치료 중\n**간호사**: (검사 결과나 치료 계획 설명)\n\n**환자**: (환자의 반응과 질문)\n\n**간호사**: (추가 설명 및 안심시키기)\n\n## 회복기\n**간호사**: (상태 호전에 대한 피드백)\n\n**환자**: (환자의 소감 및 질문)\n\n**간호사**: (교육 및 추후 관리 안내)\n          `,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(scenariosRef, newScenario);\n        const scenario = {\n          id: docRef.id,\n          ...newScenario\n        };\n        commit('SET_LOADING', false);\n        return scenario;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    },\n    // 시나리오 수정\n    async modifyScenario({\n      commit,\n      getters\n    }, {\n      scenarioId,\n      userInput\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        // OpenAI API를 통해 시나리오 수정\n        const response = await axios.post('/api/modifications/modify/', {\n          scenario_id: scenarioId,\n          user_input: userInput\n        });\n\n        // Firebase Firestore에 수정 기록 저장\n        const db = getFirestore();\n        const modificationsRef = collection(db, 'modifications');\n        const modification = {\n          scenario_id: scenarioId,\n          user_input: userInput,\n          modified_content: response.data.modified_content,\n          created_at: new Date().toISOString(),\n          created_by: {\n            id: getters.currentUser.id,\n            username: getters.currentUser.username,\n            email: getters.currentUser.email,\n            is_admin: getters.currentUser.is_admin\n          }\n        };\n        const docRef = await addDoc(modificationsRef, modification);\n\n        // 시나리오 내용 업데이트\n        const scenarioRef = doc(db, 'scenarios', scenarioId);\n        await updateDoc(scenarioRef, {\n          content: response.data.modified_content,\n          updated_at: new Date().toISOString()\n        });\n\n        // 현재 시나리오 업데이트\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\n          const updatedScenario = {\n            ...getters.currentScenario,\n            content: response.data.modified_content,\n            updated_at: new Date().toISOString()\n          };\n          commit('SET_CURRENT_SCENARIO', updatedScenario);\n        }\n        commit('SET_LOADING', false);\n        return {\n          id: docRef.id,\n          ...modification\n        };\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        commit('SET_LOADING', false);\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","collection","addDoc","getDocs","doc","getDoc","updateDoc","query","orderBy","where","defaults","baseURL","process","env","VUE_APP_API_URL","state","user","scenarios","currentScenario","loading","error","getters","isLoggedIn","currentUser","isAdmin","is_admin","isLoading","mutations","SET_USER","SET_SCENARIOS","SET_CURRENT_SCENARIO","scenario","SET_LOADING","SET_ERROR","CLEAR_ERROR","actions","checkAuth","commit","adminUser","localStorage","getItem","JSON","parse","tempUser","login","email","password","id","username","setItem","stringify","includes","length","Date","now","split","created_at","toISOString","Error","message","register","auth","userCredential","db","userRef","newUser","docRef","logout","removeItem","fetchScenarios","scenariosRef","q","querySnapshot","forEach","push","data","fetchScenario","scenarioRef","docSnap","exists","createScenario","scenarioData","response","post","age","past_medical_history","family_history","allergies","major_symptoms","include_conversation","newScenario","title","main_disease","personal_info","additional_info","content","patient_conversation","updated_at","created_by","modifyScenario","scenarioId","userInput","scenario_id","user_input","modificationsRef","modification","modified_content","updatedScenario"],"sources":["D:/간호시뮬레이션/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth'\r\nimport { getFirestore, collection, addDoc, getDocs, doc, getDoc, updateDoc, query, orderBy, where } from 'firebase/firestore'\r\n\r\n// API 기본 URL 설정\r\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:8000'\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: null,\r\n    scenarios: [],\r\n    currentScenario: null,\r\n    loading: false,\r\n    error: null\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.user,\r\n    currentUser: state => state.user,\r\n    isAdmin: state => state.user && state.user.is_admin,\r\n    scenarios: state => state.scenarios,\r\n    currentScenario: state => state.currentScenario,\r\n    isLoading: state => state.loading,\r\n    error: state => state.error\r\n  },\r\n  mutations: {\r\n    SET_USER(state, user) {\r\n      state.user = user\r\n    },\r\n    SET_SCENARIOS(state, scenarios) {\r\n      state.scenarios = scenarios\r\n    },\r\n    SET_CURRENT_SCENARIO(state, scenario) {\r\n      state.currentScenario = scenario\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    },\r\n    SET_ERROR(state, error) {\r\n      state.error = error\r\n    },\r\n    CLEAR_ERROR(state) {\r\n      state.error = null\r\n    }\r\n  },\r\n  actions: {\r\n    // 인증 상태 확인\r\n    checkAuth({ commit }) {\r\n      // 로컬 스토리지에서 관리자 로그인 상태 확인\r\n      const adminUser = localStorage.getItem('adminUser')\r\n      if (adminUser) {\r\n        commit('SET_USER', JSON.parse(adminUser))\r\n        return\r\n      }\r\n      \r\n      // 로컬 스토리지에서 임시 사용자 로그인 상태 확인\r\n      const tempUser = localStorage.getItem('tempUser')\r\n      if (tempUser) {\r\n        commit('SET_USER', JSON.parse(tempUser))\r\n        return\r\n      }\r\n      \r\n      /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n      const auth = getAuth()\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          try {\r\n            // Firebase 인증 후 사용자 정보 설정\r\n            const db = getFirestore()\r\n            const userRef = collection(db, 'users')\r\n            const q = query(userRef, where('email', '==', user.email))\r\n            const querySnapshot = await getDocs(q)\r\n            \r\n            if (!querySnapshot.empty) {\r\n              // 기존 사용자 정보 가져오기\r\n              const userData = querySnapshot.docs[0].data()\r\n              commit('SET_USER', {\r\n                id: querySnapshot.docs[0].id,\r\n                username: userData.username || user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: userData.is_admin || false\r\n              })\r\n            } else {\r\n              // 새 사용자 정보 생성\r\n              const newUser = {\r\n                username: user.displayName || user.email,\r\n                email: user.email,\r\n                is_admin: user.email === 'admin@example.com', // 관리자 계정 설정\r\n                created_at: new Date().toISOString()\r\n              }\r\n              \r\n              const docRef = await addDoc(userRef, newUser)\r\n              commit('SET_USER', {\r\n                id: docRef.id,\r\n                ...newUser\r\n              })\r\n            }\r\n          } catch (error) {\r\n            console.error('사용자 정보 가져오기 실패:', error)\r\n            commit('SET_USER', null)\r\n          }\r\n        } else {\r\n          commit('SET_USER', null)\r\n        }\r\n      })\r\n      */\r\n    },\r\n    \r\n    // 로그인\r\n    async login({ commit }, { email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // 관리자 계정 특별 처리 (admin@example.com / password123!)\r\n        if (email === 'admin@example.com' && password === 'password123!') {\r\n          const adminUser = {\r\n            id: 'admin-user-id',\r\n            username: 'Admin',\r\n            email: 'admin@example.com',\r\n            is_admin: true\r\n          }\r\n          commit('SET_USER', adminUser)\r\n          // 관리자 계정 정보를 로컬 스토리지에 저장\r\n          localStorage.setItem('adminUser', JSON.stringify(adminUser))\r\n          commit('SET_LOADING', false)\r\n          return adminUser\r\n        }\r\n        \r\n        // 일반 사용자 처리 (Firebase 인증 없이 임시 처리)\r\n        // Firebase 인증 오류 방지를 위해 임시 사용자 생성\r\n        if (email && email.includes('@') && password && password.length >= 6) {\r\n          const tempUser = {\r\n            id: 'user-' + Date.now(),\r\n            username: email.split('@')[0],\r\n            email: email,\r\n            is_admin: false,\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          commit('SET_USER', tempUser)\r\n          localStorage.setItem('tempUser', JSON.stringify(tempUser))\r\n          commit('SET_LOADING', false)\r\n          return tempUser\r\n        } else {\r\n          throw new Error('유효한 이메일과 6자 이상의 비밀번호를 입력해주세요.')\r\n        }\r\n        \r\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase 인증 후 사용자 정보 설정\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        const q = query(userRef, where('email', '==', userCredential.user.email))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        if (!querySnapshot.empty) {\r\n          // 기존 사용자 정보 가져오기\r\n          const userData = querySnapshot.docs[0].data()\r\n          const user = {\r\n            id: querySnapshot.docs[0].id,\r\n            username: userData.username || userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userData.is_admin || false\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        } else {\r\n          // 새 사용자 정보 생성\r\n          const newUser = {\r\n            username: userCredential.user.displayName || userCredential.user.email,\r\n            email: userCredential.user.email,\r\n            is_admin: userCredential.user.email === 'admin@example.com', // 관리자 계정 설정\r\n            created_at: new Date().toISOString()\r\n          }\r\n          \r\n          const docRef = await addDoc(userRef, newUser)\r\n          const user = {\r\n            id: docRef.id,\r\n            ...newUser\r\n          }\r\n          commit('SET_USER', user)\r\n          commit('SET_LOADING', false)\r\n          return user\r\n        }\r\n        */\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 회원가입\r\n    async register({ commit }, { username, email, password }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        const auth = getAuth()\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password)\r\n        \r\n        // Firebase Firestore에 사용자 정보 저장\r\n        const db = getFirestore()\r\n        const userRef = collection(db, 'users')\r\n        \r\n        const newUser = {\r\n          username,\r\n          email: userCredential.user.email,\r\n          is_admin: email === 'admin@example.com', // 관리자 계정 설정\r\n          created_at: new Date().toISOString()\r\n        }\r\n        \r\n        const docRef = await addDoc(userRef, newUser)\r\n        const user = {\r\n          id: docRef.id,\r\n          ...newUser\r\n        }\r\n        \r\n        commit('SET_USER', user)\r\n        commit('SET_LOADING', false)\r\n        return user\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 로그아웃\r\n    async logout({ commit }) {\r\n      try {\r\n        // 로컬 스토리지에서 관리자 계정 정보 삭제\r\n        localStorage.removeItem('adminUser')\r\n        // 로컬 스토리지에서 임시 사용자 정보 삭제\r\n        localStorage.removeItem('tempUser')\r\n        \r\n        /* Firebase 인증 코드 주석 처리 (오류 발생)\r\n        const auth = getAuth()\r\n        await signOut(auth)\r\n        */\r\n        \r\n        commit('SET_USER', null)\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 목록 가져오기\r\n    async fetchScenarios({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // Firebase Firestore에서 시나리오 목록 가져오기\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        const q = query(scenariosRef, orderBy('created_at', 'desc'))\r\n        const querySnapshot = await getDocs(q)\r\n        \r\n        const scenarios = []\r\n        querySnapshot.forEach((doc) => {\r\n          scenarios.push({\r\n            id: doc.id,\r\n            ...doc.data()\r\n          })\r\n        })\r\n        \r\n        commit('SET_SCENARIOS', scenarios)\r\n        commit('SET_LOADING', false)\r\n        return scenarios\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 상세 정보 가져오기\r\n    async fetchScenario({ commit }, id) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // Firebase Firestore에서 시나리오 상세 정보 가져오기\r\n        const db = getFirestore()\r\n        const scenarioRef = doc(db, 'scenarios', id)\r\n        const docSnap = await getDoc(scenarioRef)\r\n        \r\n        if (docSnap.exists()) {\r\n          const scenario = {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n          commit('SET_CURRENT_SCENARIO', scenario)\r\n          commit('SET_LOADING', false)\r\n          return scenario\r\n        } else {\r\n          throw new Error('시나리오를 찾을 수 없습니다.')\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 생성\r\n    async createScenario({ commit, getters }, scenarioData) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // OpenAI API를 통해 시나리오 생성\r\n        const response = await axios.post('/api/scenarios/generate/', {\r\n          ...scenarioData,\r\n          age: scenarioData.age || '30', // 나이 수동 입력 지원\r\n          past_medical_history: scenarioData.past_medical_history || '없음',\r\n          family_history: scenarioData.family_history || '없음',\r\n          allergies: scenarioData.allergies || '없음',\r\n          major_symptoms: scenarioData.major_symptoms || '없음',\r\n          include_conversation: true // 환자와의 대화 포함 요청\r\n        })\r\n        \r\n        // Firebase Firestore에 시나리오 저장\r\n        const db = getFirestore()\r\n        const scenariosRef = collection(db, 'scenarios')\r\n        \r\n        const newScenario = {\r\n          title: scenarioData.title,\r\n          main_disease: scenarioData.main_disease,\r\n          personal_info: {\r\n            ...scenarioData.personal_info,\r\n            age: scenarioData.age || '30'\r\n          },\r\n          additional_info: {\r\n            ...scenarioData.additional_info,\r\n            past_medical_history: scenarioData.past_medical_history || '없음',\r\n            family_history: scenarioData.family_history || '없음',\r\n            allergies: scenarioData.allergies || '없음',\r\n            major_symptoms: scenarioData.major_symptoms || '없음'\r\n          },\r\n          content: response.data.content,\r\n          patient_conversation: response.data.patient_conversation || `\r\n# 환자와의 대화\r\n\r\n## 초기 평가\r\n**간호사**: 안녕하세요, 환자분. 어떻게 지내세요? 어디가 불편하신가요?\r\n\r\n**환자**: (증상에 따른 반응)\r\n\r\n**간호사**: 언제부터 이런 증상이 있었나요?\r\n\r\n**환자**: (증상 시작 시점 설명)\r\n\r\n## 검사 및 치료 중\r\n**간호사**: (검사 결과나 치료 계획 설명)\r\n\r\n**환자**: (환자의 반응과 질문)\r\n\r\n**간호사**: (추가 설명 및 안심시키기)\r\n\r\n## 회복기\r\n**간호사**: (상태 호전에 대한 피드백)\r\n\r\n**환자**: (환자의 소감 및 질문)\r\n\r\n**간호사**: (교육 및 추후 관리 안내)\r\n          `,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(scenariosRef, newScenario)\r\n        const scenario = {\r\n          id: docRef.id,\r\n          ...newScenario\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return scenario\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 시나리오 수정\r\n    async modifyScenario({ commit, getters }, { scenarioId, userInput }) {\r\n      commit('SET_LOADING', true)\r\n      commit('CLEAR_ERROR')\r\n      \r\n      try {\r\n        // OpenAI API를 통해 시나리오 수정\r\n        const response = await axios.post('/api/modifications/modify/', {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput\r\n        })\r\n        \r\n        // Firebase Firestore에 수정 기록 저장\r\n        const db = getFirestore()\r\n        const modificationsRef = collection(db, 'modifications')\r\n        \r\n        const modification = {\r\n          scenario_id: scenarioId,\r\n          user_input: userInput,\r\n          modified_content: response.data.modified_content,\r\n          created_at: new Date().toISOString(),\r\n          created_by: {\r\n            id: getters.currentUser.id,\r\n            username: getters.currentUser.username,\r\n            email: getters.currentUser.email,\r\n            is_admin: getters.currentUser.is_admin\r\n          }\r\n        }\r\n        \r\n        const docRef = await addDoc(modificationsRef, modification)\r\n        \r\n        // 시나리오 내용 업데이트\r\n        const scenarioRef = doc(db, 'scenarios', scenarioId)\r\n        await updateDoc(scenarioRef, {\r\n          content: response.data.modified_content,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        \r\n        // 현재 시나리오 업데이트\r\n        if (getters.currentScenario && getters.currentScenario.id === scenarioId) {\r\n          const updatedScenario = {\r\n            ...getters.currentScenario,\r\n            content: response.data.modified_content,\r\n            updated_at: new Date().toISOString()\r\n          }\r\n          commit('SET_CURRENT_SCENARIO', updatedScenario)\r\n        }\r\n        \r\n        commit('SET_LOADING', false)\r\n        return {\r\n          id: docRef.id,\r\n          ...modification\r\n        }\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        commit('SET_LOADING', false)\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n})\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,0BAA0B,EAAEC,8BAA8B,EAAEC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAChI,SAASC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,QAAQ,oBAAoB;;AAE7H;AACAf,KAAK,CAACgB,QAAQ,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,uBAAuB;AAE/E,eAAerB,WAAW,CAAC;EACzBsB,KAAK,EAAE;IACLC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE,EAAE;IACbC,eAAe,EAAE,IAAI;IACrBC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE;IACPC,UAAU,EAAEP,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,IAAI;IACjCO,WAAW,EAAER,KAAK,IAAIA,KAAK,CAACC,IAAI;IAChCQ,OAAO,EAAET,KAAK,IAAIA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACS,QAAQ;IACnDR,SAAS,EAAEF,KAAK,IAAIA,KAAK,CAACE,SAAS;IACnCC,eAAe,EAAEH,KAAK,IAAIA,KAAK,CAACG,eAAe;IAC/CQ,SAAS,EAAEX,KAAK,IAAIA,KAAK,CAACI,OAAO;IACjCC,KAAK,EAAEL,KAAK,IAAIA,KAAK,CAACK;EACxB,CAAC;EACDO,SAAS,EAAE;IACTC,QAAQA,CAACb,KAAK,EAAEC,IAAI,EAAE;MACpBD,KAAK,CAACC,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDa,aAAaA,CAACd,KAAK,EAAEE,SAAS,EAAE;MAC9BF,KAAK,CAACE,SAAS,GAAGA,SAAS;IAC7B,CAAC;IACDa,oBAAoBA,CAACf,KAAK,EAAEgB,QAAQ,EAAE;MACpChB,KAAK,CAACG,eAAe,GAAGa,QAAQ;IAClC,CAAC;IACDC,WAAWA,CAACjB,KAAK,EAAEI,OAAO,EAAE;MAC1BJ,KAAK,CAACI,OAAO,GAAGA,OAAO;IACzB,CAAC;IACDc,SAASA,CAAClB,KAAK,EAAEK,KAAK,EAAE;MACtBL,KAAK,CAACK,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDc,WAAWA,CAACnB,KAAK,EAAE;MACjBA,KAAK,CAACK,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDe,OAAO,EAAE;IACP;IACAC,SAASA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACpB;MACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,IAAIF,SAAS,EAAE;QACbD,MAAM,CAAC,UAAU,EAAEI,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;QACzC;MACF;;MAEA;MACA,MAAMK,QAAQ,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACjD,IAAIG,QAAQ,EAAE;QACZN,MAAM,CAAC,UAAU,EAAEI,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAC;QACxC;MACF;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC;IAED;IACA,MAAMC,KAAKA,CAAC;MAAEP;IAAO,CAAC,EAAE;MAAEQ,KAAK;MAAEC;IAAS,CAAC,EAAE;MAC3CT,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,IAAIQ,KAAK,KAAK,mBAAmB,IAAIC,QAAQ,KAAK,cAAc,EAAE;UAChE,MAAMR,SAAS,GAAG;YAChBS,EAAE,EAAE,eAAe;YACnBC,QAAQ,EAAE,OAAO;YACjBH,KAAK,EAAE,mBAAmB;YAC1BpB,QAAQ,EAAE;UACZ,CAAC;UACDY,MAAM,CAAC,UAAU,EAAEC,SAAS,CAAC;UAC7B;UACAC,YAAY,CAACU,OAAO,CAAC,WAAW,EAAER,IAAI,CAACS,SAAS,CAACZ,SAAS,CAAC,CAAC;UAC5DD,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAOC,SAAS;QAClB;;QAEA;QACA;QACA,IAAIO,KAAK,IAAIA,KAAK,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAIL,QAAQ,IAAIA,QAAQ,CAACM,MAAM,IAAI,CAAC,EAAE;UACpE,MAAMT,QAAQ,GAAG;YACfI,EAAE,EAAE,OAAO,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC;YACxBN,QAAQ,EAAEH,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7BV,KAAK,EAAEA,KAAK;YACZpB,QAAQ,EAAE,KAAK;YACf+B,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;UACrC,CAAC;UAEDpB,MAAM,CAAC,UAAU,EAAEM,QAAQ,CAAC;UAC5BJ,YAAY,CAACU,OAAO,CAAC,UAAU,EAAER,IAAI,CAACS,SAAS,CAACP,QAAQ,CAAC,CAAC;UAC1DN,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAOM,QAAQ;QACjB,CAAC,MAAM;UACL,MAAM,IAAIe,KAAK,CAAC,+BAA+B,CAAC;QAClD;;QAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC,OAAOtC,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMwC,QAAQA,CAAC;MAAEvB;IAAO,CAAC,EAAE;MAAEW,QAAQ;MAAEH,KAAK;MAAEC;IAAS,CAAC,EAAE;MACxDT,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF,MAAMwB,IAAI,GAAGlE,OAAO,CAAC,CAAC;QACtB,MAAMmE,cAAc,GAAG,MAAMjE,8BAA8B,CAACgE,IAAI,EAAEhB,KAAK,EAAEC,QAAQ,CAAC;;QAElF;QACA,MAAMiB,EAAE,GAAG/D,YAAY,CAAC,CAAC;QACzB,MAAMgE,OAAO,GAAG/D,UAAU,CAAC8D,EAAE,EAAE,OAAO,CAAC;QAEvC,MAAME,OAAO,GAAG;UACdjB,QAAQ;UACRH,KAAK,EAAEiB,cAAc,CAAC9C,IAAI,CAAC6B,KAAK;UAChCpB,QAAQ,EAAEoB,KAAK,KAAK,mBAAmB;UAAE;UACzCW,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACrC,CAAC;QAED,MAAMS,MAAM,GAAG,MAAMhE,MAAM,CAAC8D,OAAO,EAAEC,OAAO,CAAC;QAC7C,MAAMjD,IAAI,GAAG;UACX+B,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAGkB;QACL,CAAC;QAED5B,MAAM,CAAC,UAAU,EAAErB,IAAI,CAAC;QACxBqB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAOrB,IAAI;MACb,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAM+C,MAAMA,CAAC;MAAE9B;IAAO,CAAC,EAAE;MACvB,IAAI;QACF;QACAE,YAAY,CAAC6B,UAAU,CAAC,WAAW,CAAC;QACpC;QACA7B,YAAY,CAAC6B,UAAU,CAAC,UAAU,CAAC;;QAEnC;AACR;AACA;AACA;;QAEQ/B,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClC,MAAMvC,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMiD,cAAcA,CAAC;MAAEhC;IAAO,CAAC,EAAE;MAC/BA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAM0B,EAAE,GAAG/D,YAAY,CAAC,CAAC;QACzB,MAAMsE,YAAY,GAAGrE,UAAU,CAAC8D,EAAE,EAAE,WAAW,CAAC;QAChD,MAAMQ,CAAC,GAAGhE,KAAK,CAAC+D,YAAY,EAAE9D,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC5D,MAAMgE,aAAa,GAAG,MAAMrE,OAAO,CAACoE,CAAC,CAAC;QAEtC,MAAMtD,SAAS,GAAG,EAAE;QACpBuD,aAAa,CAACC,OAAO,CAAErE,GAAG,IAAK;UAC7Ba,SAAS,CAACyD,IAAI,CAAC;YACb3B,EAAE,EAAE3C,GAAG,CAAC2C,EAAE;YACV,GAAG3C,GAAG,CAACuE,IAAI,CAAC;UACd,CAAC,CAAC;QACJ,CAAC,CAAC;QAEFtC,MAAM,CAAC,eAAe,EAAEpB,SAAS,CAAC;QAClCoB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAOpB,SAAS;MAClB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAMwD,aAAaA,CAAC;MAAEvC;IAAO,CAAC,EAAEU,EAAE,EAAE;MAClCV,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAM0B,EAAE,GAAG/D,YAAY,CAAC,CAAC;QACzB,MAAM6E,WAAW,GAAGzE,GAAG,CAAC2D,EAAE,EAAE,WAAW,EAAEhB,EAAE,CAAC;QAC5C,MAAM+B,OAAO,GAAG,MAAMzE,MAAM,CAACwE,WAAW,CAAC;QAEzC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACpB,MAAMhD,QAAQ,GAAG;YACfgB,EAAE,EAAE+B,OAAO,CAAC/B,EAAE;YACd,GAAG+B,OAAO,CAACH,IAAI,CAAC;UAClB,CAAC;UACDtC,MAAM,CAAC,sBAAsB,EAAEN,QAAQ,CAAC;UACxCM,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;UAC5B,OAAON,QAAQ;QACjB,CAAC,MAAM;UACL,MAAM,IAAI2B,KAAK,CAAC,kBAAkB,CAAC;QACrC;MACF,CAAC,CAAC,OAAOtC,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAM4D,cAAcA,CAAC;MAAE3C,MAAM;MAAEhB;IAAQ,CAAC,EAAE4D,YAAY,EAAE;MACtD5C,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAM6C,QAAQ,GAAG,MAAMxF,KAAK,CAACyF,IAAI,CAAC,0BAA0B,EAAE;UAC5D,GAAGF,YAAY;UACfG,GAAG,EAAEH,YAAY,CAACG,GAAG,IAAI,IAAI;UAAE;UAC/BC,oBAAoB,EAAEJ,YAAY,CAACI,oBAAoB,IAAI,IAAI;UAC/DC,cAAc,EAAEL,YAAY,CAACK,cAAc,IAAI,IAAI;UACnDC,SAAS,EAAEN,YAAY,CAACM,SAAS,IAAI,IAAI;UACzCC,cAAc,EAAEP,YAAY,CAACO,cAAc,IAAI,IAAI;UACnDC,oBAAoB,EAAE,IAAI,CAAC;QAC7B,CAAC,CAAC;;QAEF;QACA,MAAM1B,EAAE,GAAG/D,YAAY,CAAC,CAAC;QACzB,MAAMsE,YAAY,GAAGrE,UAAU,CAAC8D,EAAE,EAAE,WAAW,CAAC;QAEhD,MAAM2B,WAAW,GAAG;UAClBC,KAAK,EAAEV,YAAY,CAACU,KAAK;UACzBC,YAAY,EAAEX,YAAY,CAACW,YAAY;UACvCC,aAAa,EAAE;YACb,GAAGZ,YAAY,CAACY,aAAa;YAC7BT,GAAG,EAAEH,YAAY,CAACG,GAAG,IAAI;UAC3B,CAAC;UACDU,eAAe,EAAE;YACf,GAAGb,YAAY,CAACa,eAAe;YAC/BT,oBAAoB,EAAEJ,YAAY,CAACI,oBAAoB,IAAI,IAAI;YAC/DC,cAAc,EAAEL,YAAY,CAACK,cAAc,IAAI,IAAI;YACnDC,SAAS,EAAEN,YAAY,CAACM,SAAS,IAAI,IAAI;YACzCC,cAAc,EAAEP,YAAY,CAACO,cAAc,IAAI;UACjD,CAAC;UACDO,OAAO,EAAEb,QAAQ,CAACP,IAAI,CAACoB,OAAO;UAC9BC,oBAAoB,EAAEd,QAAQ,CAACP,IAAI,CAACqB,oBAAoB,IAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;UACDxC,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCwC,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCyC,UAAU,EAAE;YACVnD,EAAE,EAAE1B,OAAO,CAACE,WAAW,CAACwB,EAAE;YAC1BC,QAAQ,EAAE3B,OAAO,CAACE,WAAW,CAACyB,QAAQ;YACtCH,KAAK,EAAExB,OAAO,CAACE,WAAW,CAACsB,KAAK;YAChCpB,QAAQ,EAAEJ,OAAO,CAACE,WAAW,CAACE;UAChC;QACF,CAAC;QAED,MAAMyC,MAAM,GAAG,MAAMhE,MAAM,CAACoE,YAAY,EAAEoB,WAAW,CAAC;QACtD,MAAM3D,QAAQ,GAAG;UACfgB,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAG2C;QACL,CAAC;QAEDrD,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAON,QAAQ;MACjB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAM+E,cAAcA,CAAC;MAAE9D,MAAM;MAAEhB;IAAQ,CAAC,EAAE;MAAE+E,UAAU;MAAEC;IAAU,CAAC,EAAE;MACnEhE,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,aAAa,CAAC;MAErB,IAAI;QACF;QACA,MAAM6C,QAAQ,GAAG,MAAMxF,KAAK,CAACyF,IAAI,CAAC,4BAA4B,EAAE;UAC9DmB,WAAW,EAAEF,UAAU;UACvBG,UAAU,EAAEF;QACd,CAAC,CAAC;;QAEF;QACA,MAAMtC,EAAE,GAAG/D,YAAY,CAAC,CAAC;QACzB,MAAMwG,gBAAgB,GAAGvG,UAAU,CAAC8D,EAAE,EAAE,eAAe,CAAC;QAExD,MAAM0C,YAAY,GAAG;UACnBH,WAAW,EAAEF,UAAU;UACvBG,UAAU,EAAEF,SAAS;UACrBK,gBAAgB,EAAExB,QAAQ,CAACP,IAAI,CAAC+B,gBAAgB;UAChDlD,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCyC,UAAU,EAAE;YACVnD,EAAE,EAAE1B,OAAO,CAACE,WAAW,CAACwB,EAAE;YAC1BC,QAAQ,EAAE3B,OAAO,CAACE,WAAW,CAACyB,QAAQ;YACtCH,KAAK,EAAExB,OAAO,CAACE,WAAW,CAACsB,KAAK;YAChCpB,QAAQ,EAAEJ,OAAO,CAACE,WAAW,CAACE;UAChC;QACF,CAAC;QAED,MAAMyC,MAAM,GAAG,MAAMhE,MAAM,CAACsG,gBAAgB,EAAEC,YAAY,CAAC;;QAE3D;QACA,MAAM5B,WAAW,GAAGzE,GAAG,CAAC2D,EAAE,EAAE,WAAW,EAAEqC,UAAU,CAAC;QACpD,MAAM9F,SAAS,CAACuE,WAAW,EAAE;UAC3BkB,OAAO,EAAEb,QAAQ,CAACP,IAAI,CAAC+B,gBAAgB;UACvCT,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACrC,CAAC,CAAC;;QAEF;QACA,IAAIpC,OAAO,CAACH,eAAe,IAAIG,OAAO,CAACH,eAAe,CAAC6B,EAAE,KAAKqD,UAAU,EAAE;UACxE,MAAMO,eAAe,GAAG;YACtB,GAAGtF,OAAO,CAACH,eAAe;YAC1B6E,OAAO,EAAEb,QAAQ,CAACP,IAAI,CAAC+B,gBAAgB;YACvCT,UAAU,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;UACrC,CAAC;UACDpB,MAAM,CAAC,sBAAsB,EAAEsE,eAAe,CAAC;QACjD;QAEAtE,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,OAAO;UACLU,EAAE,EAAEmB,MAAM,CAACnB,EAAE;UACb,GAAG0D;QACL,CAAC;MACH,CAAC,CAAC,OAAOrF,KAAK,EAAE;QACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAACuC,OAAO,CAAC;QAClCtB,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;QAC5B,MAAMjB,KAAK;MACb;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}